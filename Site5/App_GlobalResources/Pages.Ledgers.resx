<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountPlan.CreateRootAccount" xml:space="preserve">
    <value>Create new root account</value>
  </data>
  <data name="AccountPlan.Info" xml:space="preserve">
    <value>This is the overview of the financial accounts in your bookkeeping ledger. You can do some maintenance from here, even if most of the daily operations should be delegated to the budget owners.</value>
  </data>
  <data name="AccountPlan.PageTitle" xml:space="preserve">
    <value>Account Plan</value>
  </data>
  <data name="BalanceSheet.AccountName" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="BalanceSheet.Assets" xml:space="preserve">
    <value>Assets</value>
  </data>
  <data name="BalanceSheet.ContentHeader" xml:space="preserve">
    <value>Balance Sheet for {0},</value>
    <comment>{0} is the organization name. The year follows immediately.</comment>
  </data>
  <data name="BalanceSheet.Current" xml:space="preserve">
    <value>Current</value>
  </data>
  <data name="BalanceSheet.Debt" xml:space="preserve">
    <value>Liabilities</value>
  </data>
  <data name="BalanceSheet.DownloadFileName" xml:space="preserve">
    <value>BalanceSheet</value>
    <comment>Must ONLY contain A-Z, a-z characters - nothing accented!</comment>
  </data>
  <data name="BalanceSheet.EndYear" xml:space="preserve">
    <value>End-XXXX</value>
    <comment>The XXXX is replaced with year number.</comment>
  </data>
  <data name="BalanceSheet.Info" xml:space="preserve">
    <value>The Balance Sheet is an overview of assets and debts at a snapshot in time, and is used to see how results affect the overall financial health of the organization. You may also want to look at the &lt;a href="ProfitLossStatement.aspx"&gt;profit-and-loss statement&lt;/a&gt; which is the overview of income and expenditure.</value>
  </data>
  <data name="BalanceSheet.PageTitle" xml:space="preserve">
    <value>Balance Sheet</value>
  </data>
  <data name="BalanceSheet.Q1" xml:space="preserve">
    <value>Change Q1</value>
  </data>
  <data name="BalanceSheet.Q2" xml:space="preserve">
    <value>Change Q2</value>
  </data>
  <data name="BalanceSheet.Q3" xml:space="preserve">
    <value>Change Q3</value>
  </data>
  <data name="BalanceSheet.Q4" xml:space="preserve">
    <value>Change Q4</value>
  </data>
  <data name="BalanceSheet.StartYear" xml:space="preserve">
    <value>Start-XXXX</value>
    <comment>The XXXX is replaced with year number.</comment>
  </data>
  <data name="ProfitLossStatement.AccountName" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="ProfitLossStatement.ContentHeader" xml:space="preserve">
    <value>P&amp;L for {0} for</value>
    <comment>The {0} is the organization name. The year number follows this string.</comment>
  </data>
  <data name="ProfitLossStatement.Costs" xml:space="preserve">
    <value>Expenses</value>
  </data>
  <data name="ProfitLossStatement.DownloadFileName" xml:space="preserve">
    <value>ProfitLoss</value>
    <comment>Must ONLY contain A-Z, a-z characters - nothing accented!</comment>
  </data>
  <data name="ProfitLossStatement.Income" xml:space="preserve">
    <value>Revenue</value>
  </data>
  <data name="ProfitLossStatement.Info" xml:space="preserve">
    <value>The P&amp;L is an overview of income and expenditures, which are grouped by budgets or cost/income type. The sum of all income and expenditure is the yearly result. You may also want to look at the &lt;a href="BalanceSheet.aspx"&gt;balance sheet&lt;/a&gt; which is the overview of assets and debts.</value>
  </data>
  <data name="ProfitLossStatement.LastYear" xml:space="preserve">
    <value>Last Year</value>
  </data>
  <data name="ProfitLossStatement.PageTitle" xml:space="preserve">
    <value>Profit &amp; Loss Statement</value>
  </data>
  <data name="ProfitLossStatement.Q1" xml:space="preserve">
    <value>Q1</value>
  </data>
  <data name="ProfitLossStatement.Q2" xml:space="preserve">
    <value>Q2</value>
  </data>
  <data name="ProfitLossStatement.Q3" xml:space="preserve">
    <value>Q3</value>
  </data>
  <data name="ProfitLossStatement.Q4" xml:space="preserve">
    <value>Q4</value>
  </data>
  <data name="ProfitLossStatement.Results" xml:space="preserve">
    <value>Results</value>
    <comment>Footer on P&amp;L statement</comment>
  </data>
  <data name="ProfitLossStatement.Ytd" xml:space="preserve">
    <value>YTD</value>
    <comment>Year To Date</comment>
  </data>
  <data name="ResyncExternalAccount.Info" xml:space="preserve">
    <value>If your bookkeeping in Swarmops has gotten out of sync with your bank records for whatever technical or human reason, you can resynchronize them here by uploading a master file that covers the time frame you need to resync.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;Warning:&lt;/strong&gt; this is a time-consuming process that may do a &lt;em&gt;lot&lt;/em&gt; of changes to your bookkeeping. Do not use unless you have discovered a mismatch in the records vs. your bank.&lt;br/&gt;&lt;br/&gt;(You will get a chance to review proposed changes before they are committed to your financial records.)</value>
  </data>
  <data name="ResyncExternalAccount.PageTitle" xml:space="preserve">
    <value>Resynchronize Bank Account</value>
  </data>
  <data name="SetRootBudgets.BudgetOwnerHeader" xml:space="preserve">
    <value>Budget, Owner</value>
    <comment>Displayed above editables</comment>
  </data>
  <data name="SetRootBudgets.Info" xml:space="preserve">
    <value>This is where the root budgets are set for each budget year. After these are set, each budget owner suballocates funds within their respective budget trees.</value>
  </data>
  <data name="SetRootBudgets.PageHeader" xml:space="preserve">
    <value>Root Budgets For {0}</value>
    <comment>The {0} is replaced with the organization's name.</comment>
  </data>
  <data name="SetRootBudgets.PageTitle" xml:space="preserve">
    <value>Set Root Level Budgets</value>
    <comment>Displayed above main content</comment>
  </data>
  <data name="SetRootBudgets.SetNewBudgets" xml:space="preserve">
    <value>Set New Budgets</value>
    <comment>Text on submit button</comment>
  </data>
  <data name="UploadBankFiles.AccountStatement" xml:space="preserve">
    <value>Account Statement</value>
  </data>
  <data name="UploadBankFiles.BankAccount" xml:space="preserve">
    <value>Bank Account</value>
  </data>
  <data name="UploadBankFiles.BankScreenshot" xml:space="preserve">
    <value>Bank Screenshot</value>
    <comment>Displayed as header above modally zoomed screenshot</comment>
  </data>
  <data name="UploadBankFiles.DownloadDataSince" xml:space="preserve">
    <value>&lt;/p&gt;&lt;p&gt;(The most recent data in Swarmops in &lt;em&gt;{0}&lt;/em&gt; is from {1:yyyy-MMM-dd}. You should download bank data from at least &lt;strong&gt;{2:yyyy-MMM-dd}.&lt;/strong&gt;)</value>
    <comment>Displayed to help user determine scope of bank download</comment>
  </data>
  <data name="UploadBankFiles.DownloadDataSince.Paypal" xml:space="preserve">
    <value>&lt;/p&gt;&lt;p&gt;(Paypal will tell you the time of the last transaction download. Download all transactions from that point in time, adding some three days of overlap.)</value>
    <comment>Displayed instead of date of last transaction in the case of Paypal.</comment>
  </data>
  <data name="UploadBankFiles.DownloadInstructions" xml:space="preserve">
    <value>Bank Download Instructions</value>
    <comment>Header above instructions for generation of the bank file type selected.</comment>
  </data>
  <data name="UploadBankFiles.DownloadInstructions.BankgiroSEFile" xml:space="preserve">
    <value>Different banks have different means of obtaining the BGMAX format file. On SEB, you go to &lt;strong&gt;Payments&lt;/strong&gt; and &lt;strong&gt;File communications&lt;/strong&gt; to see a list of files to retrieve. Other banks will vary. In any case, upload them here.</value>
  </data>
  <data name="UploadBankFiles.DownloadInstructions.PaypalFile" xml:space="preserve">
    <value>Log on to PayPal. Go to &lt;strong&gt;Your Account&lt;/strong&gt;, and under the &lt;strong&gt;History&lt;/strong&gt; menu, select &lt;strong&gt;Download History&lt;/strong&gt;. Select &lt;strong&gt;Custom Date Range&lt;/strong&gt;, enter the range since last download (as indicated) plus some overlap, and most importantly, select &lt;strong&gt;Tab Delimited - All Activity&lt;/strong&gt;. Click &lt;strong&gt;Download&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Some time will pass before you get a mail from PayPal saying that the file is ready for download. It will be named &lt;em&gt;download.txt&lt;/em&gt;. Upload this file.</value>
  </data>
  <data name="UploadBankFiles.DownloadInstructions.PaysonFile" xml:space="preserve">
    <value>Log on to Payson. Go to the &lt;strong&gt;History&lt;/strong&gt; tab, and click &lt;strong&gt;Export history&lt;/strong&gt;. The downloaded file will be named &lt;em&gt;Payson.Export.[date].xls&lt;/em&gt;. Upload this file.</value>
  </data>
  <data name="UploadBankFiles.DownloadInstructions.SebAccountFile" xml:space="preserve">
    <value>Open SEB's internet bank. Go to &lt;strong&gt;your account&lt;/strong&gt;, and enter the date span you wish to download in the search box. Press &lt;strong&gt;filter&lt;/strong&gt;. After that, click the link to &lt;strong&gt;save the account history&lt;/strong&gt;. A popup will appear. Choose &lt;strong&gt;csv&lt;/strong&gt; and &lt;strong&gt;tab separated&lt;/strong&gt;, then &lt;strong&gt;save&lt;/strong&gt;. The downloaded file will be named &lt;em&gt;Kontohändelser.csv&lt;/em&gt;. Upload this file.</value>
    <comment>Only translate to languages where SEB is active.</comment>
  </data>
  <data name="UploadBankFiles.ErrorBalance" xml:space="preserve">
    <value>&lt;p&gt;The file contained {0:N0} transactions. &lt;strong&gt;{1:N0} transactions&lt;/strong&gt; have been successfully imported into the &lt;em&gt;{2}&lt;/em&gt; bookkeeping account. ({3:N0} transactions were duplicates.)&lt;/p&gt;&lt;p&gt;&lt;strong&gt;However, the bank balance does not match the records in Swarmops.&lt;/strong&gt; This is usually due to missing transactions. Please upload a transaction list with a larger time span to make sure that Swarmops sees all transactions.&lt;/p&gt;&lt;p&gt;Swarmops's bookkeeping account is currently &lt;strong&gt;not in sync&lt;/strong&gt; with that of the bank.&lt;/p&gt;</value>
    <comment>Displayed when import successful, but end balance out of sync. Assumes plural along all pasted numbers.</comment>
  </data>
  <data name="UploadBankFiles.ErrorInterpretation" xml:space="preserve">
    <value>&lt;h3&gt;The bank file could not be imported.&lt;/h3&gt;&lt;p&gt;This has one of three reasons: you missed some detail in the download instructions, the bank has changed its format, or you accidentally uploaded the wrong file entirely (like a photo from your last party instead of the transactions list). No transactions were imported at all. &lt;strong&gt;Please retry.&lt;/strong&gt;</value>
  </data>
  <data name="UploadBankFiles.ExpectedFile" xml:space="preserve">
    <value>Expected File</value>
    <comment>The name of the expected file for uploading.</comment>
  </data>
  <data name="UploadBankFiles.FileImportedHeader" xml:space="preserve">
    <value>File Successfully Imported</value>
    <comment>Displayed as header after successful processing</comment>
  </data>
  <data name="UploadBankFiles.FileImportedHeader.ErrorBalance" xml:space="preserve">
    <value>File Imported, But Data Out Of Sync</value>
    <comment>Displayed as header after a good processing that ended in sync failure</comment>
  </data>
  <data name="UploadBankFiles.FileType" xml:space="preserve">
    <value>File Type</value>
    <comment>can be Account Statement or Payments File</comment>
  </data>
  <data name="UploadBankFiles.ImportError" xml:space="preserve">
    <value>Error on importing file</value>
    <comment>Displayed as header on import failure</comment>
  </data>
  <data name="UploadBankFiles.ImportResults" xml:space="preserve">
    <value>&lt;p&gt;The file contained {0:N0} transactions. &lt;strong&gt;{1:N0} transactions&lt;/strong&gt; have been successfully imported into the &lt;em&gt;{2}&lt;/em&gt; bookkeeping account. ({3:N0} transactions were duplicates.)&lt;/p&gt;&lt;p&gt;After import, the account balance in Swarmops matches that of the bank.&lt;/p&gt;</value>
    <comment>Displayed on successful import. Assumes plural among all pasted numbers.</comment>
  </data>
  <data name="UploadBankFiles.Info" xml:space="preserve">
    <value>Here, you can upload files from your bank or payment provider into your organization's bookkeeping. Examples include account history and payments received.</value>
    <comment>Displayed in sidebar on page.</comment>
  </data>
  <data name="UploadBankFiles.Instructions" xml:space="preserve">
    <value>Instructions</value>
  </data>
  <data name="UploadBankFiles.PageTitle" xml:space="preserve">
    <value>Upload Bank Files</value>
    <comment>Displayed above main content.</comment>
  </data>
  <data name="UploadBankFiles.PaymentAllDuplicates" xml:space="preserve">
    <value>However, they were all duplicates of payment information that was previously uploaded. No new payment information has been imported to Swarmops.</value>
  </data>
  <data name="UploadBankFiles.PaymentCount" xml:space="preserve">
    <value>no payments|one payment|{0} payments</value>
    <comment>none|one|many</comment>
  </data>
  <data name="UploadBankFiles.PaymentFileUploadedHeader" xml:space="preserve">
    <value>Payment File Uploaded</value>
  </data>
  <data name="UploadBankFiles.PaymentGroupCount" xml:space="preserve">
    <value>no payment groups|one payment group|{0} payment groups</value>
    <comment>none|one|many</comment>
  </data>
  <data name="UploadBankFiles.PaymentsFile" xml:space="preserve">
    <value>Payments File</value>
  </data>
  <data name="UploadBankFiles.PaymentSummary1" xml:space="preserve">
    <value>The payment file contained {0}.</value>
  </data>
  <data name="UploadBankFiles.PaymentSummary2" xml:space="preserve">
    <value>&lt;strong&gt;{0} {1:N2}&lt;/strong&gt; in payments were imported, distributed over {2} across {3}.</value>
    <comment>like EUR 2,102.00 in 3 payments across 2 groups </comment>
  </data>
  <data name="UploadBankFiles.PaymentSummaryDuplicates" xml:space="preserve">
    <value>There was also some duplicate information ({0} across {1}).</value>
  </data>
  <data name="UploadBankFiles.Processing" xml:space="preserve">
    <value>Processing File...</value>
  </data>
  <data name="UploadBankFiles.ProcessingComplete" xml:space="preserve">
    <value>Processing Complete</value>
  </data>
  <data name="UploadBankFiles.ResultsBad" xml:space="preserve">
    <value>&lt;p&gt;&lt;br/&gt;&lt;strong&gt;The file could not be read as an input file to this bank.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;There are several reasons this could happen: the file may be corrupt, the bank may have silently changed its file format, or you uploaded the wrong file entirely. Please try again.&lt;/p&gt;</value>
    <comment>Displayed when the input file can't be parsed, before import attempt.</comment>
  </data>
  <data name="UploadBankFiles.ResultsGood" xml:space="preserve">
    <value>&lt;p&gt;The file has been &lt;strong&gt;successfully imported.&lt;/strong&gt; {0:N0} new transactions imported; {1:N0} discarded as duplicates of what was already in Swarmops. The account balance in Swarmops matches that of the bank.&lt;/p&gt;&lt;p&gt;The file contained transactions from {2:yyyy-MMM-dd} to {3:yyyy-MMM-dd}.&lt;/p&gt;</value>
    <comment>Zero is new transaction count, one is duplicate transaction count, two and three are lowest and highest dates found in file. Pay attention to date format and adjust to culture.</comment>
  </data>
  <data name="UploadBankFiles.ResultsQuestionable" xml:space="preserve">
    <value>&lt;p&gt;The file was imported, but the &lt;strong&gt;resulting account balance mismatches.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;After importing {0:N0} transactions (and discarding {1:N0} duplicates), the entire file has been processed. However, the resulting account balance in Swarmops is not the same as that of the bank statement; there is a difference of {3} {2:N2}.&lt;/p&gt;
&lt;p&gt;Please try uploading a fresh account statement. If that still produces a mismatch, you may need to try &lt;a href="/Pages/v5/Ledgers/ResyncExternalAccount.aspx"&gt;resynchronizing&lt;/a&gt; the bank account with a comprehensive account statement file.&lt;/p&gt;</value>
    <comment>Displayed on successful import, but the resulting balance is off compared to the account statement file that was just uploaded. 2 is the diff, 3 is the currency.</comment>
  </data>
  <data name="UploadBankFiles.SelectAccount" xml:space="preserve">
    <value>Select Bookkeeping Account</value>
    <comment>Select prompt for the financial account in the organization's bookkeeping.</comment>
  </data>
  <data name="UploadBankFiles.SelectBankAndAccount" xml:space="preserve">
    <value>Select File Type And Account For Upload</value>
  </data>
  <data name="UploadBankFiles.SelectBankFileType" xml:space="preserve">
    <value>Select Bank File Type</value>
    <comment>Header above several bank logos, prompting a selection of bank.</comment>
  </data>
  <data name="UploadBankFiles.UploadAnother" xml:space="preserve">
    <value>Upload another bank file?</value>
    <comment>Displayed as header after uploading one file</comment>
  </data>
  <data name="UploadBankFiles.UploadBankFile" xml:space="preserve">
    <value>Upload bank file</value>
    <comment>Displayed as header above download instructions / upload form</comment>
  </data>
  <data name="ViewOutstandingAccounts.FooterDifference" xml:space="preserve">
    <value>Difference</value>
  </data>
  <data name="ViewOutstandingAccounts.FooterLedgerBalance" xml:space="preserve">
    <value>Ledger Balance</value>
  </data>
  <data name="ViewOutstandingAccounts.FooterTotal" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderAction" xml:space="preserve">
    <value>Action</value>
    <comment>keep short</comment>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderAmount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderDescription" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderExpectedCloseDate" xml:space="preserve">
    <value>Exp Close</value>
    <comment>keep short</comment>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderId" xml:space="preserve">
    <value>ID#</value>
    <comment>keep short</comment>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderOpenedDate" xml:space="preserve">
    <value>Opened Date</value>
    <comment>keep short</comment>
  </data>
  <data name="ViewOutstandingAccounts.GridHeaderRecipient" xml:space="preserve">
    <value>Recipient</value>
  </data>
  <data name="ViewOutstandingAccounts.Header" xml:space="preserve">
    <value>List Unsettled</value>
  </data>
  <data name="ViewOutstandingAccounts.Info" xml:space="preserve">
    <value>This page lets you verify the outstanding and unsettled accounts (expenses, invoices, cash advances, etc.) at the current point in time or at the time of closing of any previous ledger.</value>
  </data>
  <data name="ViewOutstandingAccounts.PageTitle" xml:space="preserve">
    <value>List Unsettled Accounts</value>
  </data>
  <data name="AccountPlan.Edit.AccountName" xml:space="preserve">
    <value>Account name</value>
  </data>
  <data name="AccountPlan.Edit.ActiveLong" xml:space="preserve">
    <value>Is this account open for transactions?</value>
  </data>
  <data name="AccountPlan.Edit.ActiveShort" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="AccountPlan.Edit.AdministrativeLong" xml:space="preserve">
    <value>Are transactions here excluded from 2-D reports?</value>
  </data>
  <data name="AccountPlan.Edit.AdministrativeShort" xml:space="preserve">
    <value>Admin</value>
  </data>
  <data name="AccountPlan.Edit.BudgetBalance" xml:space="preserve">
    <value>Budget (balance is &lt;span id="SpanTextCurrency"&gt;foo&lt;/span&gt; &lt;span id="SpanEditBalance"&gt;bar&lt;/span&gt;)</value>
    <comment>foo, bar replaced on load with actual values</comment>
  </data>
  <data name="AccountPlan.Edit.ExpensableLong" xml:space="preserve">
    <value>Can people use this account for expense reports?</value>
  </data>
  <data name="AccountPlan.Edit.ExpensableShort" xml:space="preserve">
    <value>Expensable</value>
  </data>
  <data name="AccountPlan.Edit.FileUploadProfile" xml:space="preserve">
    <value>File upload profile</value>
  </data>
  <data name="AccountPlan.Edit.Header" xml:space="preserve">
    <value>Editing Account</value>
  </data>
  <data name="AccountPlan.Edit.HeaderAutomation" xml:space="preserve">
    <value>Automation</value>
    <comment>Automatic connections to bank, blockchain etc.</comment>
  </data>
  <data name="AccountPlan.Edit.HeaderConfiguration" xml:space="preserve">
    <value>Configuration</value>
  </data>
  <data name="AccountPlan.Edit.HeaderDailyOperations" xml:space="preserve">
    <value>Daily Operations</value>
  </data>
  <data name="AccountPlan.Edit.InitialValue" xml:space="preserve">
    <value>Initial Value</value>
    <comment>For asset and liability accounts - the value going into Swarmops first ledger year</comment>
  </data>
  <data name="AccountPlan.Edit.Parent" xml:space="preserve">
    <value>Parent account or group</value>
  </data>
  <data name="AccountPlan.ExpensesBudgetsAreNegaive" xml:space="preserve">
    <value>This is an Expenses account. Such accounts normally have a budget in the negative, since they drain assets from the organization. Your proposed budget was changed to negative.</value>
    <comment>Displayed as a message box</comment>
  </data>
  <data name="AccountPlan.Header.AccountName" xml:space="preserve">
    <value>Account</value>
  </data>
  <data name="AccountPlan.Header.Balance" xml:space="preserve">
    <value>Balance</value>
  </data>
  <data name="AccountPlan.Header.Budget" xml:space="preserve">
    <value>Budget</value>
  </data>
  <data name="AccountPlan.Header.Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="AccountPlan.Header.Flags" xml:space="preserve">
    <value>Flags</value>
  </data>
  <data name="InspectLedgers.Header.For" xml:space="preserve">
    <value>for</value>
    <comment>"inspect [accountdropdown] FOR [year] [month]"</comment>
  </data>
  <data name="InspectLedgers.Header.Inspect" xml:space="preserve">
    <value>Inspect</value>
    <comment>"INSPECT [accountdropdown] for [year] [month]"</comment>
  </data>
  <data name="InspectLedgers.PageTitle" xml:space="preserve">
    <value>Inspect Ledgers</value>
  </data>
  <data name="InspectLedgers.FlaggingNotAvailable" xml:space="preserve">
    <value>Flagging a transaction for closer inspection is not yet implemented. It is scheduled for one of the early Swarmops Red sprints, some time late 2015Q1.</value>
  </data>
  <data name="InspectLedgers.InboundBalance" xml:space="preserve">
    <value>Inbound Balance</value>
  </data>
  <data name="InspectLedgers.InboundBalanceZero" xml:space="preserve">
    <value>No Previous Balance</value>
  </data>
  <data name="InspectLedgers.Info" xml:space="preserve">
    <value>This is the raw underlying Venetian bookkeeping ledgers for the organization's finances. You can study them here in detail for auditing purposes. &lt;span id="SpanInfoProfitLossAccount" style="display:none"&gt;&lt;strong&gt;You're currently watching a P&amp;L account, so signs are reversed - income is negative and expenses positive&lt;/strong&gt; due to how Venetian double bookkeeping works.&lt;/span&gt;</value>
  </data>
  <data name="InspectLedgers.InspectNotAvailable" xml:space="preserve">
    <value>Inspecting a single transaction is not yet implemented. It is scheduled for one of the early Swarmops Red sprints, late 2015Q1.</value>
  </data>
  <data name="InspectLedgers.NoTransactions" xml:space="preserve">
    <value>There are no transactions in this account for the selected time period.</value>
  </data>
  <data name="InspectLedgers.OutboundBalance" xml:space="preserve">
    <value>Outbound Balance</value>
  </data>
  <data name="InspectLedgers.OutboundBalanceZero" xml:space="preserve">
    <value>Ending Balance</value>
  </data>
  <data name="InspectLedgers.OutboundBalanceZeroToDate" xml:space="preserve">
    <value>Ending Balance (to date)</value>
    <comment>Displayed if the end-balance date isn't reached yet</comment>
  </data>
  <data name="InspectLedgers.PleaseSelectAccount" xml:space="preserve">
    <value>(Please select an account.)</value>
    <comment>Displayed initially and when no valid account selected</comment>
  </data>
  <data name="InspectLedgers.TransactionId" xml:space="preserve">
    <value>Tx#</value>
    <comment>Keep VERY short.</comment>
  </data>
  <data name="UploadBankFiles.ResultsPayments" xml:space="preserve">
    <value>&lt;br/&gt;&lt;p&gt;The payments file was &lt;strong&gt;successfully imported.&lt;/strong&gt; {1:N0} payment(s) in {0:N0} group(s), totalling {3} {2:N2}, were imported.&lt;/p&gt;</value>
    <comment>Arguments 0-3 in order: 0 PaymentGroupCount, 1 PaymentCount, 2 PaymentAmountTotal, 3 Currency</comment>
  </data>
  <data name="UploadBankFiles.ResultsPaymentsWithDupes" xml:space="preserve">
    <value>&lt;br/&gt;&lt;p&gt;The payments file was &lt;strong&gt;successfully imported.&lt;/strong&gt; {1:N0} payment(s) in {0:N0} group(s), totalling {3} {2:N2}, were imported.&lt;/p&gt;&lt;p&gt;(There were also {5:N0} duplicate payment(s) in {4:N0} group(s).)&lt;/p&gt;</value>
    <comment>Arguments 0-5 in order: 0 PaymentGroupCount, 1 PaymentCount, 2 PaymentAmountTotal, 3 Currency, 4 DuplicatePaymentGroupCount, 5 DuplicatePaymentCount</comment>
  </data>
</root>