#!/bin/bash

#Update all files, including this one. Runpos will remain same in possible new version
echo "Checking for updates to packaging..."
svn update

DEPLOYDIR=usr/share/swarmops

# Check parameters
if [ "$1" == "frontend" ]; then
  echo "Packaging frontend...";
  SOURCEDIR=/home/packager/lastbuild/frontend
  TARGETDIR=frontend
  PACKAGE=frontend
  INCLUDEDB=no
  COPYFILES=yes
elif [ "$1" == "backend" ]; then
  echo "Packaging backend..."
  SOURCEDIR=/home/packager/lastbuild/backend
  TARGETDIR=backend
  PACKAGE=backend
  INCLUDEDB=no
  COPYFILES=yes
elif [ "$1" == "extscripts" ]; then
  echo "Packaging external scripts..."
  SOURCEDIR=/home/prod/Smallwebs/HostedScripts
  TARGETDIR=frontend/Scripts/ExternalScripts
  PACKAGE=external-scripts
  COPYFILES=yes
elif [ "$1" == "common" ]; then
  echo "Packaging common (the config file)..."
  COPYFILES=no
  INCLUDEDB=yes
  PACKAGE=common
else
  echo "Syntax:"
  echo "repackage {frontend|backend|extscripts|common} [sprint|release]"
  echo
  echo "If 'sprint' or 'release' is not given, -internal will be added to the package name."
  exit 1;
fi

if [ "$2" == "release" ]; then
  CONTROLSUFFIX=-release
  echo "Packaging FINISHED RELEASE for super-stable deployments."
elif [ "$2" == "sprint" ]; then
  CONTROLSUFFIX=-sprint
  echo "Packaging END-OF-SPRINT for normal deployments."
else
  CONTROLSUFFIX=-internal
  if [ "$1" == "extscripts" ]; then
    echo "Error: Cannot package external scripts for internal build. Use 'stable'."
    exit 1;
  fi
fi

PACKAGENAME=$PACKAGE$CONTROLSUFFIX
BUILDIDSOURCE="BuildIdentity.txt"

cp ../lastbuild/frontend/BuildIdentity.txt ./BuildIdentity.txt
cp ../lastbuild/frontend/BuildIdentity.txt ../lastbuild/backend/.

# Delete flag that indicates a new drop is available
#rm /home/packaging/lastbuild/BuildDropped.txt

# Remove previous package files, if any
if [ -d debian ]; then
  rm -rf debian
fi

# Init build
mkdir debian
mkdir debian/DEBIAN
cd debian


if [ "$COPYFILES" == "yes" ]; then
  echo "Copying payload files into repo..."
  mkdir -p $DEPLOYDIR/$TARGETDIR
  cp -R $SOURCEDIR/* $DEPLOYDIR/$TARGETDIR/.

  if [ -d $SOURCEDIR/etcinitd ]; then
    echo "Adding /etc/init.d files..."
    mkdir -p etc/init.d
    cp $SOURCEDIR/etcinitd/* etc/init.d/.
  fi

  if [ "$1" == "frontend" ]; then
    echo "moving user-configurable files to /etc/swarmops/..."
    mkdir -p etc/swarmops
    mv $DEPLOYDIR/$TARGETDIR/machineKey.config etc/swarmops/.
    sed -i 's/\"machineKey.config\"/\"\/etc\/swarmops\/machineKey.config\"/g' $DEPLOYDIR/$TARGETDIR/web.config
  fi
fi

echo "Copying template files into repo..."
if [ "$INCLUDEDB" == "yes" ]; then
  mkdir -p etc/swarmops
  cp ../templates/database.config.template etc/swarmops/database.config
fi
cp ../templates/control-$PACKAGENAME.template DEBIAN/control
cp ../templates/conffiles-$PACKAGE.template DEBIAN/conffiles

if [ -e "../templates/prerm-$PACKAGE.template" ]; then
  echo "Adding $PACKAGE prerm script..."
  cp ../templates/prerm-$PACKAGE.template DEBIAN/prerm
  chmod +x DEBIAN/prerm
else
  if [ -e "DEBIAN/prerm" ]; then
    echo "Deleting old prerm script..."
    rm DEBIAN/prerm
  fi
fi

if [ -e "../templates/postinst-$PACKAGE.template" ]; then
  echo "Adding $PACKAGE postinst script..."
  cp ../templates/postinst-$PACKAGE.template DEBIAN/postinst
  chmod +x DEBIAN/postinst
else
  if [ -e "DEBIAN/postinst" ]; then
    echo "Deleting old postinst script..."
    rm DEBIAN/postinst
  fi
fi

echo "Setting build number ($(cat ../$BUILDIDSOURCE | tr -d ' \r'))..."
sed -i "s/--BuildNumber--/$(cat ../$BUILDIDSOURCE | tr -d ' \r')/" DEBIAN/control

# Calculating new checksums
echo "Creating MD5 checksum file..."
../scripts/create-md5

echo "Creating package 'swarmops-$PACKAGENAME-latest.deb'..."
cd ..
if [ -e swarmops-$PACKAGENAME-latest.deb ]; then
  rm swarmops-$PACKAGENAME-latest.deb
fi
fakeroot dpkg-deb --build debian
mv debian.deb swarmops-$PACKAGENAME-latest.deb
cp swarmops-$PACKAGENAME-latest.deb /home/prod/Smallwebs/Activizr-repo

echo "Updating repositories..."
scripts/update-repos swarmops-$PACKAGENAME-latest.deb

if [ "$2" == "" ]; then
  echo "Installing INTERNAL BUILD on swarmops-dev for testing..."
  dpkg -i swarmops-$PACKAGENAME-latest.deb
fi

echo "Cleaning up..."

rm swarmops-$PACKAGENAME-latest.deb
rm -rf debian

echo "Notifying developers that new build has deployed for test..."
echo "Package swarmops-$PACKAGENAME build $(cat $BUILDIDSOURCE | tr -d ' \r') has been deployed from continuous integration." > deploymsg.txt
echo "The package is available from repositories now, and can be tested at http://dev.swarmops.com/ as usual." >> deploymsg.txt
mail -a "From: Swarmops Builder <builds@swarmops.com>" -s "Swarmops-$PACKAGENAME $(cat $BUILDIDSOURCE | tr -d ' \r') deployed" "swarmops.developers@groups.facebook.com" < deploymsg.txt

rm deploymsg.txt
rm $BUILDIDSOURCE
